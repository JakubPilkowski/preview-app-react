name: Build & Deploy React App

on:
  push:
    branches: [main]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-north-1
  NEXT_APP_DOMAIN: ${{ secrets.NEXT_APP_DOMAIN }}

jobs:
  infra-build:
    runs-on: ubuntu-latest
    outputs:
      cloudfront-distribution-id: ${{ steps.terraform-outputs.outputs.cloudfront_distribution_id }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.PREVIEW_REACT_APP_DEPLOY_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Replace placeholders in main.tf
        run: |
          find infrastructure -name "main.tf" -exec sed -i "s/PLACEHOLDER_S3_BUCKET/${{ secrets.INFRASTRUCTURE_S3_BUCKET_NAME }}/g" {} \;
          find infrastructure -name "main.tf" -exec sed -i "s/PLACEHOLDER_DYNAMODB_TABLE/${{ secrets.DYNAMODB_TABLE_NAME }}/g" {} \;

      - name: Terraform Init
        working-directory: ./infrastructure
        run: terraform init

      - name: Terraform Plan
        working-directory: ./infrastructure
        run: |
          terraform plan -lock=false \
            -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
            -var="react_app_bucket_name=${{ secrets.REACT_APP_BUCKET_NAME }}" \
            -var="resource_owner_tag=${{ secrets.RESOURCE_OWNER_TAG }}" \
            -var="alb_id=${{ secrets.AWS_ALB_ID }}"

      - name: Terraform Apply
        working-directory: ./infrastructure
        run: |
          terraform apply -auto-approve -lock=false \
            -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
            -var="react_app_bucket_name=${{ secrets.REACT_APP_BUCKET_NAME }}" \
            -var="resource_owner_tag=${{ secrets.RESOURCE_OWNER_TAG }}" \
            -var="alb_id=${{ secrets.AWS_ALB_ID }}"

      - name: Get Terraform Outputs
        id: terraform-outputs
        working-directory: ./infrastructure
        run: |
          echo "cloudfront_distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
          echo "s3_bucket_name=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT

      - name: Display infrastructure info
        run: |
          echo "âœ… Infrastructure deployment completed successfully!"
          echo "ðŸ”„ CloudFront Distribution ID: ${{ steps.terraform-outputs.outputs.cloudfront_distribution_id }}"

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: infra-build
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --include=dev

      - name: Build React application
        run: npm run build
        env:
          VITE_NEXT_APP_DOMAIN: ${{ env.NEXT_APP_DOMAIN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.PREVIEW_REACT_APP_DEPLOY_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload static assets to S3
        run: |
          aws s3 sync ./dist s3://${{ secrets.REACT_APP_BUCKET_NAME }} --delete

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.infra-build.outputs.cloudfront-distribution-id }} \
            --paths "/*"

      - name: Display deployment info
        run: |
          echo "âœ… Deployment completed successfully!"
          echo "ðŸ”„ CloudFront Distribution ID: ${{ needs.infra-build.outputs.cloudfront-distribution-id }}"

  release:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: success()
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
          fetch-tags: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Install semantic-release dependencies
        run: |
          npm install @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/changelog @semantic-release/git @semantic-release/github

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
